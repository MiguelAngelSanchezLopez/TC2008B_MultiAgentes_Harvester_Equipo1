# -*- coding: utf-8 -*-
"""Granja Con Harvesters.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nfe1ah-kW4ENGd8iw6CqnfqLALSJG3eQ
"""

!pip install agentpy

# Esta función dibuja una celda del grid, tomando en cuenta varios estilos opcionales.
def draw_tile(graph, id, style):
    r = " . "  # Valor por defecto de la celda (un punto vacío)
    
    # Si el estilo incluye 'number' y 'id' está en 'number', se muestra el número correspondiente.
    if 'number' in style and id in style['number']: 
        r = " %-2d" % style['number'][id]
    
    # Si el estilo incluye 'point_to', dibuja una flecha indicando la dirección.
    if 'point_to' in style and style['point_to'].get(id, None) is not None:
        (x1, y1) = id  # Coordenadas actuales
        (x2, y2) = style['point_to'][id]  # Coordenadas hacia donde apunta
        if x2 == x1 + 1: r = " > "  # Derecha
        if x2 == x1 - 1: r = " < "  # Izquierda
        if y2 == y1 + 1: r = " v "  # Abajo
        if y2 == y1 - 1: r = " ^ "  # Arriba
    
    # Si el estilo incluye 'path' y 'id' está en el camino, se dibuja un '@' en la celda.
    if 'path' in style and id in style['path']:   
        r = " @ "
    
    # Si la celda es el punto de inicio, se dibuja una 'A'.
    if 'start' in style and id == style['start']: 
        r = " A "
    
    # Si la celda es la meta, se dibuja una 'G'.
    if 'goal' in style and id == style['goal']:   
        r = " G "
    
    # Si la celda es una pared, se dibuja '###'.
    if id in graph.walls: 
        r = "###"
    
    # Devuelve el valor final que se va a dibujar en la celda.
    return r

# Esta función dibuja el grid completo.
def draw_grid(graph, **style):
    # Imprime una línea superior del tamaño del grid.
    print("___" * graph.width)
    
    # Recorre cada fila (y) y cada columna (x) del grid.
    for y in range(graph.height):
        for x in range(graph.width):
            # Llama a draw_tile para cada celda y la imprime en la línea actual.
            print("%s" % draw_tile(graph, (x, y), style), end="")
        print()  # Imprime una nueva línea al final de cada fila.
    
    # Imprime una línea inferior del tamaño del grid.
    print("~~~" * graph.width)

# Definición de tipos de datos y clases necesarias para los grafos y grids.
from typing import Protocol, Iterator, Tuple, TypeVar, Optional, List, Dict
from __future__ import annotations

T = TypeVar('T')
Location = TypeVar('Location')

# Clase base que define un grafo con vecinos.
class Graph(Protocol):
    def neighbors(self, id: Location) -> list[Location]: pass

# Definición de la ubicación de una celda en el grid como una tupla de coordenadas (x, y).
GridLocation = Tuple[int, int]

# Clase que representa un grid de celdas cuadradas.
class SquareGrid:
    def __init__(self, width: int, height: int):
        self.width = width  # Ancho del grid
        self.height = height  # Alto del grid
        self.walls: List[GridLocation] = []  # Lista de posiciones de paredes en el grid

    # Comprueba si una posición está dentro de los límites del grid.
    def in_bounds(self, id: GridLocation) -> bool:
        (x, y) = id
        return 0 <= x < self.width and 0 <= y < self.height

    # Comprueba si una posición no es una pared.
    def passable(self, id: GridLocation) -> bool:
        return id not in self.walls

    # Devuelve los vecinos de una posición (norte, sur, este y oeste).
    def neighbors(self, id: GridLocation) -> Iterator[GridLocation]:
        (x, y) = id
        neighbors = [(x+1, y), (x-1, y), (x, y-1), (x, y+1)]  # Este, Oeste, Norte, Sur
        if (x + y) % 2 == 0: neighbors.reverse()  # A veces cambia el orden
        results = filter(self.in_bounds, neighbors)  # Filtra los vecinos que están dentro del grid
        results = filter(self.passable, results)  # Filtra los vecinos que no son paredes
        return results

# Clase para grafos ponderados que extiende la clase base de grafos.
class WeightedGraph(Graph):
    def cost(self, from_id: Location, to_id: Location) -> float: pass

# Grid con pesos (cada celda tiene un costo asociado).
class GridWithWeights(SquareGrid):
    def __init__(self, width: int, height: int):
        super().__init__(width, height)
        self.weights: dict[GridLocation, float] = {}  # Diccionario de pesos de celdas

    # Devuelve el costo de moverse de una celda a otra (por defecto, el costo es 1).
    def cost(self, from_node: GridLocation, to_node: GridLocation) -> float:
        return self.weights.get(to_node, 1)

# Clase para gestionar colas de prioridad (útil para algoritmos como A*).
import heapq
class PriorityQueue:
    def __init__(self):
        self.elements: list[tuple[float, T]] = []

    # Comprueba si la cola está vacía.
    def empty(self) -> bool:
        return not self.elements

    # Añade un elemento con prioridad a la cola.
    def put(self, item: T, priority: float):
        heapq.heappush(self.elements, (priority, item))

    # Obtiene el elemento con mayor prioridad (menor valor de prioridad).
    def get(self) -> T:
        return heapq.heappop(self.elements)[1]

# Función heurística para el algoritmo A* (distancia Manhattan).
def heuristic(a: GridLocation, b: GridLocation) -> float:
    (x1, y1) = a
    (x2, y2) = b
    return abs(x1 - x2) + abs(y1 - y2)

# Implementación del algoritmo de búsqueda A*.
def a_star_search(graph: WeightedGraph, start: Location, goal: Location):
    frontier = PriorityQueue()  # Cola de prioridad para el fronte de búsqueda
    frontier.put(start, 0)
    
    came_from: dict[Location, Optional[Location]] = {}  # Almacena de dónde viene cada nodo
    cost_so_far: dict[Location, float] = {}  # Almacena el costo acumulado hasta cada nodo
    came_from[start] = None
    cost_so_far[start] = 0

    while not frontier.empty():
        current: Location = frontier.get()  # Obtiene el nodo con menor costo

        # Si se llega al objetivo, se detiene la búsqueda.
        if current == goal:
            break

        # Explora los vecinos del nodo actual.
        for next in graph.neighbors(current):
            new_cost = cost_so_far[current] + graph.cost(current, next)
            if next not in cost_so_far or new_cost < cost_so_far[next]:
                cost_so_far[next] = new_cost
                priority = new_cost + heuristic(next, goal)
                frontier.put(next, priority)
                came_from[next] = current

    return came_from, cost_so_far

# Reconstruye el camino desde el punto inicial hasta el objetivo.
def reconstruct_path(came_from: dict[Location, Location], start: Location, goal: Location) -> list[Location]:
    current: Location = goal
    path: list[Location] = []
    
    # Si no se encuentra el objetivo en came_from, no hay camino.
    if goal not in came_from: 
        return []
    
    # Reconstruye el camino inversamente desde el objetivo al inicio.
    while current != start:
        path.append(current)
        current = came_from[current]
    
    path.append(start)  # Opcional: añade el punto de inicio
    path.reverse()  # Opcional: invierte el camino para que vaya del inicio al final
    return path
